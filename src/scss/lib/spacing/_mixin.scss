@use "sass:meta";
@use 'sass:list';
@use "sass:string";

@use './function';


// @mixin get($vertical_size, $horizontal_size:'') {
//     @if $vertical_size != '' and $horizontal_size != '' {
//         $spaceV: function.get_one($vertical_size);
//         $spaceH: function.get_one($horizontal_size);
//         padding: #{$spaceV} #{$spaceH}
//     }
//     @else if $vertical_size != '' {
//         padding-inline: function.get_one($vertical_size);
//     }
//     @else if $horizontal_size != '' {
//         padding-block: function.get_one($horizontal_size);
//     }
// }

/*------------------------------------------------------------*/
@mixin set-property($prop, $k, $v) {
	// Custom
	@if($k=='custom') {
		#{$prop}: #{$v};
	}
	@else {
		// for minus value
		// @include space.margin($l:-sm);
		$negative: string.index($v, "-");
		@if $negative {
			$len: string.length($v);
			$v: string.slice($v, 2, $len);
		}
		
		$v: function.get_one(#{$v});

		@if $negative {
			$v: #{$v * -1};
		}
		
		// Horizontal
		@if($k=='h' or $k=='inline') {
			#{$prop}-inline: #{$v};
		}

		// Vertical
		@if($k=='v' or $k=='block') {
			#{$prop}-block: #{$v};
		}
		// Top
		@if($k=='t' or $k=='top') {
			#{$prop}-block-start: #{$v};
		}
		// Bottom
		@if($k=='b' or $k=='bottom') {
			#{$prop}-block-end: #{$v};
		}

		// Right
		@if($k=='r' or $k=='end') {
			#{$prop}-inline-end: #{$v};
		}

		// Left
		@if($k=='l' or $k=='start') {
			#{$prop}-inline-start: #{$v};
		}
		// All
		@if($k=='all' or $k=='both') {
			#{$prop}: #{$v};
		}
		// All
		@if($k=='z' or $k=='zero') {
			#{$prop}: 0rem;
		}
	}
}
/*------------------------------------------------------------*/
// using meta
@mixin get($prop, $args...) {

	@each $k, $v in meta.keywords($args) {
		@include set-property($prop, $k, $v);
	}
}
// using pairs
/*------------------------------------------------------------*/
@mixin get-by-pairs($prop, $args) {

	@each $k, $v in $args {
		@include set-property($prop, $k, $v);
	}
}

/*------------------------------------------------------------*/
//? How to use:
// @include padding($both:lg);
// @include padding($v:xs, $h:sm);
// @include padding($inline:md, $block:lg);
// @include padding($horizontal:md, $vertical:xl);


@mixin padding($args...) {
	@include get(padding, $args...);
}
/*------------------------------------------------------------*/
@mixin margin($args...) {
	@include get(margin, $args...);
}
/*------------------------------------------------------------*/
// When position is absolute you can set position values: top, bottom, left, right 
@mixin inset($args...) {
	@include get(inset, $args...);
}

/*------------------------------------------------------------*/
//? How to use:
// @include gap(md);
// @include gap($h:md, $v:lg);
// @include gap($inline:md, $block:lg);

@mixin gap($args...) {
	$len: list.length($args);
	@if $len == 1 {
		$v: function.get_one(#{$args});
		gap: #{$v};
	}
	@else {

		@each $k, $v in meta.keywords($args) {
			// Convert space name to value { lg = 2rem }
			$v: function.get_one(#{$v});
					
			@if($k=='h' or $k=='inline') {
				column-gap: #{$v};
			}
			@else if($k=='v' or $k=='block') {
				row-gap: #{$v};
			}
		}
	}
}
/*------------------------------------------------------------*/
//? how to use:
// @include space.custom('padding-block-start', xxl);

@mixin custom($prop, $value) {
	
	$negative: string.index($value, "-");
	@if $negative {
		$len: string.length($v);
		$value: string.slice($value, 2, $len);
	}
		
	$value: function.get_one(#{$value});

	@if $negative {
		$value: #{$value * -1};
	}
	
	#{$prop}: #{$value};
}
/*------------------------------------------------------------*/
