@use "sass:list";
@use "sass:map";
@use "sass:meta";

/*------------------------------------------------------------*/
@function append($map, $key, $value) {
	$new: ($key: $value);
	@return map-merge($map, $new);
}
/*------------------------------------------------------------*/
@function map-set($map, $key, $value) {
	@return append($map, $key, $value);
}
/*------------------------------------------------------------*/
@function is-map($var) {
	@return type-of($var)=='map';
}

/*------------------------------------------------------------*/
@function deep-get2($map, $keys...) {
	@return map.get($map, $keys);
}

/*------------------------------------------------------------*/
@function deep-get($map, $keys...) {
	$scope: $map; $i: 1;
	@while (meta.type-of($scope) == map) and ($i <= list.length($keys)) {
	   $scope: map.get($scope, list.nth($keys, $i));
	   $i: $i + 1;
	}
	@return $scope;
 }

/*------------------------------------------------------------*
@function deep-get2($map, $keys...) {
	$new_map: ();
	@each $key in $keys {
		$new_item: map-get($map, $key);
		$x: map-merge($new_map, $new_item);
	}

	@return $new_map;
}
/*------------------------------------------------------------*/
// https://www.sitepoint.com/extra-map-functions-sass/
/// Compute the maximum depth of a map
/// @param {Map} $map
/// @return {Number} max depth of `$map`
@function depth($map) {
	$level: 1;
  
	@each $key, $value in $map {
	  @if type-of($value) == "map" {
		$level: max(depth($value) + 1, $level);
	  }
	}
  
	@return $level;
  }
/*------------------------------------------------------------*/
@function length($map) {
	$level: 0;
  
	@each $key, $value in $map {
	  $level: $level + 1;
	}
	@return $level;
  }
/*------------------------------------------------------------*/